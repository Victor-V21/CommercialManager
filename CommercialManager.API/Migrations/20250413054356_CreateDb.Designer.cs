// <auto-generated />
using System;
using CommercialManager.API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommercialManager.API.Migrations
{
    [DbContext(typeof(CommercialDbContext))]
    [Migration("20250413054356_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("CommercialManager.API.Database.Entities.CategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT")
                        .HasColumnName("category_id");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("TEXT")
                        .HasColumnName("discount");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<decimal?>("Price")
                        .HasColumnType("TEXT")
                        .HasColumnName("price");

                    b.Property<int>("Stock")
                        .HasColumnType("INTEGER")
                        .HasColumnName("stock");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.SalesDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<Guid>("SalesId")
                        .HasColumnType("TEXT")
                        .HasColumnName("sale_id");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL")
                        .HasColumnName("unit_price");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesId");

                    b.ToTable("SalesDetails");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.SalesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT")
                        .HasColumnName("date");

                    b.Property<double>("Total")
                        .HasColumnType("REAL")
                        .HasColumnName("total");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.ShoppingCartDetailEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("quantity");

                    b.Property<Guid>("ShoppingCartId")
                        .HasColumnType("TEXT")
                        .HasColumnName("cart_id");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("TEXT")
                        .HasColumnName("subtotal");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ShoppingCartId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.ShoppingCartEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("create_date");

                    b.HasKey("UserId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER")
                        .HasColumnName("age");

                    b.Property<int>("DNI")
                        .HasColumnType("INTEGER")
                        .HasColumnName("dni");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("lastname");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.ProductEntity", b =>
                {
                    b.HasOne("CommercialManager.API.Database.Entities.CategoryEntity", "category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.SalesDetailEntity", b =>
                {
                    b.HasOne("CommercialManager.API.Database.Entities.ProductEntity", "Product")
                        .WithMany("SalesDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialManager.API.Database.Entities.SalesEntity", "Sales")
                        .WithMany("SalesDetail")
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.SalesEntity", b =>
                {
                    b.HasOne("CommercialManager.API.Database.Entities.UserEntity", "User")
                        .WithMany("Sales")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.ShoppingCartDetailEntity", b =>
                {
                    b.HasOne("CommercialManager.API.Database.Entities.ProductEntity", "Product")
                        .WithMany("ShoppingCartDetail")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CommercialManager.API.Database.Entities.ShoppingCartEntity", "ShoppingCart")
                        .WithMany("Details")
                        .HasForeignKey("ShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ShoppingCart");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.ShoppingCartEntity", b =>
                {
                    b.HasOne("CommercialManager.API.Database.Entities.UserEntity", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("CommercialManager.API.Database.Entities.ShoppingCartEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.CategoryEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.ProductEntity", b =>
                {
                    b.Navigation("SalesDetail");

                    b.Navigation("ShoppingCartDetail");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.SalesEntity", b =>
                {
                    b.Navigation("SalesDetail");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.ShoppingCartEntity", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("CommercialManager.API.Database.Entities.UserEntity", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("ShoppingCart");
                });
#pragma warning restore 612, 618
        }
    }
}
